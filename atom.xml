<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SIGABRT</title>
  
  <subtitle>Seeking Thinking Realizing Value</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gobodigo.com/"/>
  <updated>2018-07-16T05:09:25.159Z</updated>
  <id>http://gobodigo.com/</id>
  
  <author>
    <name>Charles Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>获得运行时指定DOM元素的Style</title>
    <link href="http://gobodigo.com/2018/07/16/javascript-get-style/"/>
    <id>http://gobodigo.com/2018/07/16/javascript-get-style/</id>
    <published>2018-07-16T05:08:42.000Z</published>
    <updated>2018-07-16T05:09:25.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获得运行时指定DOM元素的Style"><a href="#获得运行时指定DOM元素的Style" class="headerlink" title="获得运行时指定DOM元素的Style"></a>获得运行时指定DOM元素的Style</h2><p>在工作中有时候需要获得指定DOM元素是否具有某种style，内联样式和层叠样式都需要检查，怎么做呢？直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串中的'-'开始的子字符串去掉'-'并替换为大写字母</span></span><br><span class="line"><span class="comment"> * 例如background-color,会被替换为backgroundColor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/-(\w)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">strMatch, p1</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.toUpperCase();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得指定元素的指定style</span></span><br><span class="line"><span class="comment"> * @param elem DOM 元素</span></span><br><span class="line"><span class="comment"> * @param property style的名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!elem || !property) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'elem or property should not be undefined or null.'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(elem.style)&#123;</span><br><span class="line">        value = elem.style[camelize(property)];<span class="comment">//先获取是否有内联样式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 无内联样式，则获取层叠样式表计算后的样式</span></span><br><span class="line">        <span class="keyword">if</span> (!value || value === <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.defaultView &amp;&amp; <span class="built_in">document</span>.defaultView.getComputedStyle) &#123;</span><br><span class="line">                <span class="keyword">var</span> css = <span class="built_in">document</span>.defaultView.getComputedStyle(elem,<span class="literal">null</span>);</span><br><span class="line">                value = css ? css.getPropertyValue(property) : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>camelize</code>方法将传入的style名称中的<code>-</code>替换掉，因为内联样式的名称中不包括它。如<code>getStyle</code>方法所体现的，优先在内联样式中查找，如果找到就返回，否则调用<code>defaultView</code>的<code>getComputedStyle</code>方法来获得层叠样式表中的style。</p><h3 id="defaultView"><a href="#defaultView" class="headerlink" title="defaultView"></a>defaultView</h3><p>什么是<code>defaultView</code>? 根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/defaultView" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/defaultView</a>所说：</p><blockquote><p>在浏览器中，该属性返回当前 document 对象所关联的 window 对象，如果没有，会返回 null。</p></blockquote><h3 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h3><blockquote><p>Window.getComputedStyle()方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。</p></blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;获得运行时指定DOM元素的Style&quot;&gt;&lt;a href=&quot;#获得运行时指定DOM元素的Style&quot; class=&quot;headerlink&quot; title=&quot;获得运行时指定DOM元素的Style&quot;&gt;&lt;/a&gt;获得运行时指定DOM元素的Style&lt;/h2&gt;&lt;p&gt;在工作中有时
      
    
    </summary>
    
      <category term="javascript" scheme="http://gobodigo.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://gobodigo.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>对抗反编译之使用密码表来保护代码中的字符串</title>
    <link href="http://gobodigo.com/2018/07/13/password-table/"/>
    <id>http://gobodigo.com/2018/07/13/password-table/</id>
    <published>2018-07-13T04:30:24.000Z</published>
    <updated>2018-07-17T05:12:14.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对抗反编译之使用密码表来保护代码中的字符串"><a href="#对抗反编译之使用密码表来保护代码中的字符串" class="headerlink" title="对抗反编译之使用密码表来保护代码中的字符串"></a>对抗反编译之使用密码表来保护代码中的字符串</h2><p>在最近几个月的时间内，由于工作的关系，一直在对抗互联网的黑色产业，就是传说中的众多刷机工作室。他们拥有数量众多的越狱设备，只要有利可图，就会对目标ipa进行破解来达到获利的目的。</p><p>众所周知，苹果设备和app的安全性要比隔壁安卓高出许多，但这个是在有苹果爸爸设计的一系列安全保护措施下面，也就是在非越狱环境下。一旦app跑在越狱的环境下，并且开发者没有做任何保护措施的话，那就相当于裸奔了。</p><p>安全这个问题很大，我仅分享给大家工作中我学到的经验，之后我会一点一点更新我的blog，如果有更多时间，还有开源一些代码到我的github上。今天先来谈谈程序中字符串的安全问题。</p><h3 id="一般程序中对敏感字符串处理的例子"><a href="#一般程序中对敏感字符串处理的例子" class="headerlink" title="一般程序中对敏感字符串处理的例子"></a>一般程序中对敏感字符串处理的例子</h3><p>一般程序员因为工期赶或者没有安全性上的顾虑，对app中敏感的字符串，尤其是跟自家服务器通信的私钥啦，身份验证key啦，都是用一个全局字符串常量来保存，就跟下面代码一样：</p><h4 id="secret-h-文件"><a href="#secret-h-文件" class="headerlink" title="secret.h 文件"></a>secret.h 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extern NSString * const secretKey;</span><br></pre></td></tr></table></figure><h4 id="secret-m-文件"><a href="#secret-m-文件" class="headerlink" title="secret.m 文件"></a>secret.m 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString * const secretKey = @&quot;nzPHmNrbjuVOO7dX&quot;;</span><br></pre></td></tr></table></figure><p>这样做的结果是，图谋不轨的人只要利用反编译工具就能够轻而易举获得app中任意敏感信息，对公司利益造成巨大损失。有不少反编译工具可以使用，例如<a href="https://www.jianshu.com/p/10873c5c1e08" target="_blank" rel="noopener">Hopper Disassembler</a>, <a href="https://www.hex-rays.com/products/ida/" target="_blank" rel="noopener">IDA Pro</a>等工具。</p><h3 id="如何有效防止字符串泄露敏感信息"><a href="#如何有效防止字符串泄露敏感信息" class="headerlink" title="如何有效防止字符串泄露敏感信息"></a>如何有效防止字符串泄露敏感信息</h3><p>办法肯定有不少，我这里分享我们自己在用的办法。</p><ol><li>基本想法就是预先配置好一个字符表</li><li>然后将需要隐藏的敏感信息字符串一个字符一个字符从表里查到出相应的位置记下来</li><li>程序使用的时候跟第2步的位置组成的字符数组，把字符串还原出来</li></ol><h4 id="代码分享"><a href="#代码分享" class="headerlink" title="代码分享"></a>代码分享</h4><blockquote><p>代码在iOS和android两个平台都能够使用</p></blockquote><h5 id="生成密码表"><a href="#生成密码表" class="headerlink" title="生成密码表"></a>生成密码表</h5><p>假设我们现在预先配置的字符表为<code>ABCD123456</code></p><p>先通过这个网站<a href="http://www.online-toolz.com/tools/text-hex-convertor.php" target="_blank" rel="noopener">http://www.online-toolz.com/tools/text-hex-convertor.php</a>获得这个字符串的hex code <code>41424344313233343536</code>，然后在程序中声明一个数组<code>hex_table</code>来存储它（见下面的代码）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PasswordTable.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//source string: ABCD123456</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> hex_table[TABLE_SIZE] = &#123;</span><br><span class="line">    <span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x43</span>,<span class="number">0x44</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x33</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x36</span> &#125;;</span><br></pre></td></tr></table></figure><h5 id="查询并输出字符在密码表中的位置"><a href="#查询并输出字符在密码表中的位置" class="headerlink" title="查询并输出字符在密码表中的位置"></a>查询并输出字符在密码表中的位置</h5><p>使用下面的代码可以在<code>console</code>看到对应的数组，将它copy下来，例如我们这里传入’BCD456’后生成对应的int数组<code>len = 6 { 1, 2, 3, 7, 8, 9, }</code>，把这个数组记下来。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PasswordTable.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * lookup magic numbers in terms of the given str based </span></span><br><span class="line"><span class="comment"> * on magic table.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lookupMagics</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str, <span class="keyword">size_t</span> str_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"len = %li &#123;"</span>, str_len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str_len; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TABLE_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hex_table[i] == str[j]) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %i,"</span>, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" &#125;\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="从密码表生成原字符串"><a href="#从密码表生成原字符串" class="headerlink" title="从密码表生成原字符串"></a>从密码表生成原字符串</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PasswordTable.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TABLE_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Convert integer array to string based on built-in hex table.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param array       integer array.</span></span><br><span class="line"><span class="comment"> @param arr_len     length of the array.</span></span><br><span class="line"><span class="comment"> @param buffer      string buffer for receiving result, make sure it was alloced.</span></span><br><span class="line"><span class="comment"> @param buffer_len  length of the buffer.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return            0 success, -1 if buffer_len is less than arr_len.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convertMagics2String</span><span class="params">(<span class="keyword">int</span> * <span class="built_in">array</span>, <span class="keyword">size_t</span> arr_len, <span class="keyword">char</span> * buffer, <span class="keyword">size_t</span> buffer_len)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PasswordTable.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//source string: ABCD123456</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> hex_table[TABLE_SIZE] = &#123;</span><br><span class="line">    <span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x43</span>,<span class="number">0x44</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x33</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x36</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convertMagics2String</span><span class="params">(<span class="keyword">int</span> * <span class="built_in">array</span>, <span class="keyword">size_t</span> arr_len, <span class="keyword">char</span> * buffer, <span class="keyword">size_t</span> buffer_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (buffer_len &lt;= arr_len) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)buffer, <span class="number">0</span>, arr_len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr_len; i++) &#123;</span><br><span class="line">        buffer[i] = hex_table[<span class="built_in">array</span>[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PasswordTable.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> magics[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;<span class="comment">//之前由调用lookupMagics生成的整形数组</span></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">7</span>];</span><br><span class="line">    convertMagics2String(magics, <span class="number">6</span>, str, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the source string is %s\n"</span>, str); <span class="comment">//将会打印: the source string is BCD456</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码中main函数的例子就是你在实际代码中的样子。这样做了以后，反编译工具就很难快速容易地通过字符串获得关键信息了，除非对方对你的代码抱有极大的兴趣，愿意花时间分析。</p><p>最后再多说一点，为了进一步加强安全性，建议对以上c函数进行混淆，将进一步加大反编译分析的难度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对抗反编译之使用密码表来保护代码中的字符串&quot;&gt;&lt;a href=&quot;#对抗反编译之使用密码表来保护代码中的字符串&quot; class=&quot;headerlink&quot; title=&quot;对抗反编译之使用密码表来保护代码中的字符串&quot;&gt;&lt;/a&gt;对抗反编译之使用密码表来保护代码中的字符串&lt;/
      
    
    </summary>
    
      <category term="逆向工程" scheme="http://gobodigo.com/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="iOS" scheme="http://gobodigo.com/tags/iOS/"/>
    
      <category term="android" scheme="http://gobodigo.com/tags/android/"/>
    
      <category term="逆向工程" scheme="http://gobodigo.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用Fastlane和Jenkins构建自动打包系统 (Part 2)</title>
    <link href="http://gobodigo.com/2018/07/02/jenkins-fastlane-part2/"/>
    <id>http://gobodigo.com/2018/07/02/jenkins-fastlane-part2/</id>
    <published>2018-07-02T02:05:14.000Z</published>
    <updated>2018-07-04T10:00:13.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fastlane-match-使用已经存在的证书"><a href="#Fastlane-match-使用已经存在的证书" class="headerlink" title="Fastlane match 使用已经存在的证书"></a>Fastlane match 使用已经存在的证书</h2><p>经过第一部分的学习，<strong>Fastlane</strong>这个工具确实很好用，自动生成证书，自动打包，自动传到appstore，一切看上很完美。但是，在默认情况下，<strong>match</strong>是不能够使用已经存在的证书和provisiong profiles的，换句话说就是每次调用<strong>fastlane match</strong>的时候，如果发现git repo没有就会为你生成新的。显然，这个限制会让很多现有项目的开发者望而生畏。好在，我们有办法可以让它支持现有证，但是这个办法稍微有点麻烦，因为它不是自动的。</p><blockquote><p>如果你还未了解什么是fastlane，请先阅读<a href="http://gobodigo.com/2018/06/23/fastlane-jenkins/">使用Fastlane和Jenkins构建自动打包系统 (Part 1)</a></p></blockquote><h3 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h3><p>在我们开始使用现有的证书前，先得保证所有需要的证书和私钥都已经被导出并且保存在本地。</p><p><strong>首先</strong></p><p>打开<strong>keychain</strong>, 选择要将要在项目中使用的证书，然后选择导出</p><p><img src="http://ot51d7lis.bkt.clouddn.com/export_cert.png" alt=""></p><p>在<strong>File Format</strong>选择导出为.cer文件。</p><p><img src="http://ot51d7lis.bkt.clouddn.com/export_dialog.JPG" alt=""></p><p>然后，再次选择导出，在<strong>File Format</strong>选择导出为p12导出私钥（不要设置密码，因为如果设置了密码后，fastlane就无法导入私钥了）。</p><p>下一步就是去查找证书在apple developer portal的id了（后续需要以这个id来为证书和私钥命名），但是这个信息在管理后台是看不到的。这个时候，就需要借助<strong>fastlane</strong>内部直接使用的一个库<strong>Spaceship</strong>。</p><h3 id="使用Spaceship"><a href="#使用Spaceship" class="headerlink" title="使用Spaceship"></a>使用Spaceship</h3><p>在命令行输入<code>irb</code>打开一个交互式的ruby shell环境。</p><p>之后，输入<code>require &#39;spaceship&#39;</code>和回车，这个命令会将这个库导入到当前的shell环境中。接下来，输入下面这个命令来登录到apple developer portal：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spaceship.login</span><br></pre></td></tr></table></figure><p>然后就是获取证书信息的命令，这里有两种方式，一种是获得全部的，另外一种是按照证书的类型来获取。</p><p>第一种，获取所有证书信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spaceship.certificate.all</span><br></pre></td></tr></table></figure><p>第二种，获取指定类型的证书信息：</p><p><strong>获取开发证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spaceship.certificate.development.all</span><br></pre></td></tr></table></figure><p><strong>获取发布证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spaceship.certificate.production.all</span><br></pre></td></tr></table></figure><p><strong>证书信息例子</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Spaceship::Portal::Certificate::Development </span><br><span class="line">id=<span class="string">"TB48U5GPM8"</span>, </span><br><span class="line">name=<span class="string">"iOS Development"</span>, </span><br><span class="line">status=<span class="string">"Issued"</span>, </span><br><span class="line">created=2018-06-29 10:35:08 UTC, </span><br><span class="line">expires=2019-06-29 10:25:08 UTC, </span><br><span class="line">owner_type=<span class="string">"teamMember"</span>, </span><br><span class="line">owner_name=<span class="string">"owner name"</span>, </span><br><span class="line">owner_id=<span class="string">"X9EZKD2K8B"</span>, </span><br><span class="line">type_display_id=<span class="string">"6QPB9NHCEX"</span>, </span><br><span class="line">can_download=<span class="literal">true</span>&gt;</span><br></pre></td></tr></table></figure><p>这个命令会列出证书所有的信息，而且很有可能会返回多个证书。这个时候，你需要仔细将其与本地证书的时间和过期对比，一致的就是你要找的证书信息。当你找到匹配的，就以证书信息的id来命名本地保存的相应的证书和私钥。</p><p>接下来我们需要将证书push到match使用的git repo上。</p><h3 id="Push-证书和Provision"><a href="#Push-证书和Provision" class="headerlink" title="Push 证书和Provision"></a>Push 证书和Provision</h3><p>在命令行输入下面的命令来准备一些需要用到的变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">irb(main):004:0&gt; require <span class="string">'match'</span></span><br><span class="line">=&gt; <span class="literal">true</span></span><br><span class="line">irb(main):005:0&gt; git_url=<span class="string">'git@github.com:path-to/the-encrypted-certs-repo.git'</span></span><br><span class="line">=&gt; <span class="string">"git@github.com:path-to/the-encrypted-certs-repo.git"</span></span><br><span class="line">irb(main):006:0&gt; shallow_clone = <span class="literal">false</span></span><br><span class="line">=&gt; <span class="literal">false</span></span><br><span class="line">irb(main):007:0&gt; manual_password = <span class="string">'password-to-decrypt-the-repo'</span></span><br><span class="line">=&gt; <span class="string">"password-to-decrypt-the-repo"</span></span><br><span class="line">irb(main):008:0&gt;</span><br></pre></td></tr></table></figure><p>接下来，我们需要使用下面的命令把存放证书的git repo给clone下来并且解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">irb(main):005:0&gt; workspace = Match::GitHelper.clone(git_url, shallow_clone, manual_password: manual_password)</span><br><span class="line">[21:17:30]: Cloning remote git repo...</span><br><span class="line">[21:17:31]: 🔓  Successfully decrypted certificates repo</span><br><span class="line">=&gt; <span class="string">"/var/folders/5s/5cgmqxkx4fx6bllwgp1y5dlh000gp/T/d2018-0411-3701-148akjh"</span></span><br></pre></td></tr></table></figure><p>这个命令将repo clone到了<code>/var/folders/...</code>打开它。然后在这个文件夹里面，根据证书的类型来创建不同的文件夹：</p><ul><li>如果创建开发证书，则放到<code>certs/development</code>里面</li><li>如果是发布证书，则放到<code>certs/distribution</code>里面</li></ul><p>将证书和私钥都要对应放到上述的文件夹里面。</p><p>最后来处理<strong>provision profiles</strong>，首先你得从<strong>Apple developer portal</strong>下载所需要的<strong>provision profiles</strong>。下载完成后，根据不同的类型放入不同的文件夹，规则如下：</p><ul><li><strong>adhoc</strong>: <code>profiles/adhoc/AdHoc_&lt;appbundleid&gt;.mobileprovision</code></li><li><strong>appstore</strong>: <code>profiles/appstore/AppStore_&lt;appbundleid&gt;.mobileprovision</code></li><li><strong>development</strong>: <code>profiles/development/Development_&lt;appbundleid&gt;.mobileprovision</code></li></ul><p>做完这些后，现在我们来把证书和provision profiles推到git repo上去吧。执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irb(main):006:0&gt; Match::GitHelper.commit_changes(workspace, <span class="string">"add certificate, private key and provisioning profiles"</span>, git_url)</span><br></pre></td></tr></table></figure><p>大功告成。现在你应该可以通过<strong>fastlane</strong>命令来安装证书和provision profiles了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane match development --<span class="built_in">readonly</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Fastlane-match-使用已经存在的证书&quot;&gt;&lt;a href=&quot;#Fastlane-match-使用已经存在的证书&quot; class=&quot;headerlink&quot; title=&quot;Fastlane match 使用已经存在的证书&quot;&gt;&lt;/a&gt;Fastlane match
      
    
    </summary>
    
      <category term="iOS" scheme="http://gobodigo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://gobodigo.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用Fastlane和Jenkins构建自动打包系统 (Part 1)</title>
    <link href="http://gobodigo.com/2018/06/23/fastlane-jenkins/"/>
    <id>http://gobodigo.com/2018/06/23/fastlane-jenkins/</id>
    <published>2018-06-23T14:30:11.000Z</published>
    <updated>2018-06-25T05:38:59.396Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>发这篇博文的目的主要是总结一些在使用fastlane过程遇到的坑，顺便吐槽一下Fastlane官方网站：写的好飘逸，对于新手来说不看几遍不试几次，完全不知到整个体系是如何的。。。最后我希望能够帮助看到这篇文章的你:]</p></blockquote><h2 id="Fastlane"><a href="#Fastlane" class="headerlink" title="Fastlane"></a>Fastlane</h2><p><img src="https://docs.fastlane.tools/img/fastlane_text.png" alt=""></p><p><strong>Fastlane</strong>是一种能够将iOS和android平台beta测试或者正式发布完全自动化的工具！It’s amazing dude! 它能够做的事情有：</p><ul><li>生成应用商店需要的所有截图 (本地化的截图！可以根据需要为各种语言生成）</li><li>处理打包时候的签名</li><li>发布应用到商店</li></ul><p>我们接下来以iOS为例讲解如何使用fastlane打包iOS app</p><h3 id="fastlane初始化配置"><a href="#fastlane初始化配置" class="headerlink" title="fastlane初始化配置"></a>fastlane初始化配置</h3><p>详细的setup步骤这里不赘述，大家可以到<a href="https://docs.fastlane.tools/getting-started/ios/setup/" target="_blank" rel="noopener">Getting started with fastlane for iOS</a>查看。</p><p>根据文档，安装完fastlane后，配置工程的第一个命令是(这里不建议使用swift版本的init，一个是目前是beta版本，另外一个是当前能查到的资料都是以<a href="https://www.martinfowler.com/articles/rake.html" target="_blank" rel="noopener">ruby DSL</a>来说明的):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure><p>运行这个命令之后，会看到命令行出现交互式提问，第一个问题经常是问你想用fastlane 来干嘛？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 📸  Automate screenshots (自动化appstore 本地化截图)</span><br><span class="line">2. 👩‍✈️  Automate beta distribution to TestFlight (自动化发布beta测试app到test flight)</span><br><span class="line">3. 🚀  Automate App Store distribution (appstore 发布自动化)</span><br><span class="line">4. 🛠  Manual setup - manually setup your project to automate your tasks (手动配置自己的工程)</span><br></pre></td></tr></table></figure><p>如果您的app有多个target或者没有找到跟workspace名字一样的scheme，fastlane会提示输入bundle id，然后会提示输入apple id及其密码，如果apple id在多个team还会提示选择team等等，总之问题问完，你的初始配置也就完成了。</p><p>配置完后，会在您的工程下面生成一个名为<strong>fastlane</strong>的文件夹，这个文件夹就是所有fastlane的配置所在了。文件夹会包含两个文件:</p><ul><li>Appfile: 用来存储在使用fastlane过程中所需要的有用信息，例如apple id，bundle id等</li><li>Fastfile: fastlane编译以及发布的核心文件，所有需要自动编译配置的代码都放到这个文件里面</li></ul><h3 id="Fastfile"><a href="#Fastfile" class="headerlink" title="Fastfile"></a>Fastfile</h3><p>现在重点讲一下如何配置<strong>Fastfile</strong>。初始化完后，fastlane会自动为工程生成如下代码在<strong>fastfile</strong>里面(我在初始化的时候选择的是第3项–appstore发布自动化，如果选择别的选项可能会与下面的例子有稍微不同)。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  desc <span class="string">"Push a new release build to the App Store"</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">    build_app(<span class="symbol">workspace:</span> <span class="string">"Spacename.xcworkspace"</span>, <span class="symbol">scheme:</span> <span class="string">"SchemeName"</span>)</span><br><span class="line">    upload_to_app_store(<span class="symbol">skip_metadata:</span> <span class="literal">true</span>, <span class="symbol">skip_screenshots:</span> <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>platform: 告诉fastlane是哪个平台。</li><li>desc: 注解。一般放到每个lane之前一行用于解释这个lane的作用</li><li>lane: 简单来讲就是一个任务的配置，比如发布到test flight算一个任务，打内部测试Adhoc包等。lane 后面跟着的是冒号加任务名称，如上代码： :release, 这样你就可以在命令行下面输入如下命令就可以执行这个任务了：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane release</span><br></pre></td></tr></table></figure><ul><li>lane的body里面能够使用的命令都叫做action，能调用的<a href="https://docs.fastlane.tools/actions" target="_blank" rel="noopener">actions</a>官方已经帮我们列出来了，而且每个action都有详细的文档。例子中的任务一眼就能看出来是做什么：编译名为<strong>Spacename.xcworkspace</strong>，scheme为<strong>SchemeName</strong>的工程，编译完后上传到app store（跳过上传meta data和screenshots）</li></ul><blockquote><p>读者可以亲手试一试，讲workspace和scheme改为自己工程的名字，然后在命令行运行fastlane release，之后如果编译没有失败并且itunes connect连接和验证成功的话，您会看到ipa包已经成功的传到了itunes connect的后台了。怎么样？很厉害吧，就2行代码就搞定了编译，打包，上传到appstore这种平时繁杂的任务！</p></blockquote><p>等等，我们好像漏了什么。对，最重要的程序签名！</p><h3 id="Fastlane-match"><a href="#Fastlane-match" class="headerlink" title="Fastlane match"></a>Fastlane match</h3><p>什么是Fastlane match? Fastlane match不仅仅是在配置fastlane自动打包时候需要用到，而且极大地简化了在一个开发团队中共享证书和provisioning profiles的流程！</p><ul><li>项目组中每来一个新成员，是不是都要花时间为新成员配置证书，并且把他加入到相应项目的provisioning profiles里面？如果项目众多，是不是管理的一场噩梦？想要简化吗？快使用<strong>Fastlane match</strong>!</li><li>连接到苹果服务器很慢，下载provisioning profile很慢！想每次都下载快吗？快使用<strong>Fastlane match</strong>!</li><li>想在团队中方便的使用个人开发者证书，而不用拷来拷去吗？快使用<strong>Fastlane match</strong>!</li><li>项目组有新设备后，快使用<strong>Fastlane match</strong>! 一键搞定！</li></ul><p>说了那么多好处，咱们来看看怎么用！首先在工程所在文件夹运行如下命令（确保在运行之前先运行过fastlane init命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane match init</span><br></pre></td></tr></table></figure><p>运行完后，fastlane会问用来存储工程的证书和provisioning profiles的Git repo的URL是什么？所以，马上去Github或者Gitlab上创建一个去吧！</p><p><strong>注意！！！</strong></p><ul><li>所有传到指定git repo的证书和provisioning profiles将会被fastlane使用OpenSSL来加密存储的。</li><li>你必须对曾git repo有完全的控制权力。最好保证你所使用的git repo是私有的并且使用安全的私钥。</li><li>即使你的证书泄露了，在不知道你的itunes connect账号的情况下并不能对你造成伤害</li><li>如果你使用Git hub或者Bitbuckt，建议你使用开启两步验证的itunes connect账号来作为match连接时用的账号</li></ul><p>跟随着所有提示做完后会在fastlane文件夹下生成一个叫做<strong>Matchfile</strong>的文件，初始的文件内容与下面类似：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git_url(<span class="string">"git@xxx/certificates.git"</span>)</span><br><span class="line"></span><br><span class="line">type(<span class="string">"development"</span>) <span class="comment"># The default type, can be: appstore, adhoc, enterprise or development</span></span><br><span class="line"></span><br><span class="line">app_identifier([<span class="string">"bundle identifier 1"</span>, <span class="string">"bundle identifier 2"</span>])</span><br><span class="line"><span class="comment">#username("xxx<span class="doctag">@xxx</span>.com") # Your Apple Developer Portal username</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For all available options run `fastlane match --help`</span></span><br><span class="line"><span class="comment"># Remove the # in the beginning of the line to enable the other options</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#match(app_identifier: ["bundle identifier 1", "bundle identifier 2"], type: "adhoc")</span></span><br></pre></td></tr></table></figure><p>初始化完后，就到为工程生成证书和provisioning profiles了 ，（如果不是新项目，想利用已经存在的证书怎么办？这部分也有解决方案，我打算放到part 2的时候再讲）运行如下命令，就会为工程生成development证书和相应的provisiong profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane match development</span><br></pre></td></tr></table></figure><p>第一次运行这个命令会提示请输入passphase，这个passphase就是用来加密证书和provisioning profiles用的。</p><p><strong>注意</strong>: 运行以上命令,如果发现没有相应的证书和provisiong profiles就会生成新的证书和provisioning profiles，所以请慎用！</p><p>接下来，如果想在一台新的机器上安装该工程的证书就可以运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane match development --readonly</span><br></pre></td></tr></table></figure><p>加上<strong>–readonly</strong>就能保证不会生成新的，而仅仅只是执行安装而已。除了development,我们还能指定adhoc, appstore, enterprise等参数来生成不同场景的证书。</p><p>生成的证书和provisioning profiles都会被加密放到初始化match时指定的git repo中，这样当使用<strong>fastlane match development</strong>或者<strong>fastlane match development –readonly</strong>的时候，fastlane会第一时间从指定的git repo中去寻找并安装，所以不需要经过苹果服务器。如果git repo是自己公司服务器的，那就更快了:]。</p><p>如果想一口气装上所需要的证书和provisioning profiles, 那么可以写一个脚本来完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">install appstore development profiles and cert</span></span><br><span class="line">fastlane match development --readonly</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">uncomment below lines <span class="keyword">if</span> you need install other types of certs</span></span><br><span class="line"><span class="meta">#</span><span class="bash">fastlane match adhoc --<span class="built_in">readonly</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">fastlane match appstore --<span class="built_in">readonly</span></span></span><br></pre></td></tr></table></figure><p>将脚本传到工程git上，这样只要有新机器，就运行一下这个脚本就全部装上了。</p><h4 id="在Fastfile中使用match"><a href="#在Fastfile中使用match" class="headerlink" title="在Fastfile中使用match"></a>在Fastfile中使用match</h4><p>配置好match后，如何在fastfile中使用呢？其实很简单，如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  desc <span class="string">"Push a new release build to the App Store"</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">  sync_code_signing</span><br><span class="line">    build_app(<span class="symbol">workspace:</span> <span class="string">"Spacename.xcworkspace"</span>, <span class="symbol">scheme:</span> <span class="string">"SchemeName"</span>)</span><br><span class="line">    upload_to_app_store(<span class="symbol">skip_metadata:</span> <span class="literal">true</span>, <span class="symbol">skip_screenshots:</span> <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>只需要在编译之前调用sync_code_signing即可！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;发这篇博文的目的主要是总结一些在使用fastlane过程遇到的坑，顺便吐槽一下Fastlane官方网站：写的好飘逸，对于新手来说不看几遍不试几次，完全不知到整个体系是如何的。。。最后我希望能够帮助看到这篇文章的你:]&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="iOS" scheme="http://gobodigo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://gobodigo.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>敏捷设计之SOLID原则</title>
    <link href="http://gobodigo.com/2017/08/24/agile-desgin/"/>
    <id>http://gobodigo.com/2017/08/24/agile-desgin/</id>
    <published>2017-08-24T07:38:11.000Z</published>
    <updated>2018-07-16T04:36:53.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="敏捷设计之SOLID原则"><a href="#敏捷设计之SOLID原则" class="headerlink" title="敏捷设计之SOLID原则"></a>敏捷设计之SOLID原则</h2><h3 id="把握所学东西的本质"><a href="#把握所学东西的本质" class="headerlink" title="把握所学东西的本质"></a>把握所学东西的本质</h3><p>在讨论SOLID原则之前，我们需要明确一点，就是这个规则是为了解决什么问题而被发明出来的。只有弄清楚这一点，才能够在实际工作中正确应用。举个栗子吧，比如为什么要采用MVC？教科书般的回答就是MVC就是Model-View-Controller，然后将Model,View和Controller各自按照教科书说一遍。你觉得你真的理解为什么要用MVC了吗？举个简单的例子说明非MVC是什么样的吧？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">set conn=Server.CreateObject(<span class="string">"ADODB.Connection"</span>)</span><br><span class="line">conn.Provider=<span class="string">"Microsoft.Jet.OLEDB.4.0"</span></span><br><span class="line">conn.Open(Server.Mappath(<span class="string">"/db/northwind.mdb"</span>))</span><br><span class="line">set rs = Server.CreateObject(<span class="string">"ADODB.recordset"</span>)</span><br><span class="line">rs.Open <span class="string">"Select * from Customers"</span>, conn</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> until rs.EOF</span><br><span class="line">    <span class="keyword">for</span> each x <span class="keyword">in</span> rs.Fields</span><br><span class="line">       Response.Write(x.name)</span><br><span class="line">       Response.Write(<span class="string">" = "</span>)</span><br><span class="line">       Response.Write(x.value &amp; <span class="string">"&lt;br&gt;"</span>) </span><br><span class="line">    next</span><br><span class="line">    Response.Write(<span class="string">"&lt;br&gt;"</span>)</span><br><span class="line">    rs.MoveNext</span><br><span class="line">loop</span><br><span class="line"></span><br><span class="line">rs.close</span><br><span class="line">conn.close</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>这是一段ASP classic的代码。这段代码的问题：</p><ul><li>无法在类似逻辑的页面重用使用数据库的代码。为了满足快速迭代的需求，将会促使程序员自然而然的使用copy-paste大法。</li><li>页面的显示与数据库代码混在一起，如果需求变化，要调整页面显示将会变得很麻烦。一个页面还好，如果是几十个这种代码的页面呢？</li></ul><p>所以，从如何能够让这段代码重用为出发点，MVC在不断的试验与测试中诞生了。MVC的优点总结请自行Google。</p><h3 id="设计臭味"><a href="#设计臭味" class="headerlink" title="设计臭味"></a>设计臭味</h3><p>设计一个软件的结构或者架构的时候，如果没有足够的经验，经常会产生如下问题:</p><h4 id="僵化性"><a href="#僵化性" class="headerlink" title="僵化性"></a>僵化性</h4><p>僵化性是指对软件进行改动，即使是简单的改动。如果单一的改动会导致有依赖关系的模块中的连锁改动，那么设计就是僵化的。</p><h4 id="脆弱性"><a href="#脆弱性" class="headerlink" title="脆弱性"></a>脆弱性</h4><p>脆弱性是指，在进行一个改动时，可能会导致程序的许多地方出现问题。</p><h4 id="顽固性"><a href="#顽固性" class="headerlink" title="顽固性"></a>顽固性</h4><p>顽固性是指，设计中包含了对其他有用的部分，但是要把这些部分从系统中分离出来所需要的努力和风险却是巨大的，这是一种令人遗憾，但非常常见的情况。</p><h4 id="粘滞性"><a href="#粘滞性" class="headerlink" title="粘滞性"></a>粘滞性</h4><p>粘滞性是指，当面临一个改动时，开发人员尝尝发现有多种改动的方法。其中，有一些会保持敏捷设计，而另外一些则会破坏设计。比如，如果编译所花费的时间很长，那么开发人员就会被诱导去做不会导致大规模编译的举动。</p><h4 id="不必要的复杂性"><a href="#不必要的复杂性" class="headerlink" title="不必要的复杂性"></a>不必要的复杂性</h4><p>如果设计中包含了当前没用的组成部分，它就含有不必要的复杂性。当开发人员预测需求的变化，并在软件中放置了处理潜在变化的代码时，尝尝出现这种情况。起初，这样做看起来貌似是一件好事，但是结果尝尝正好相反。为过多的可能性做准备，致使设计由于含有绝不会用到的结构而变得混乱。</p><h4 id="不必要的重复性"><a href="#不必要的重复性" class="headerlink" title="不必要的重复性"></a>不必要的重复性</h4><p>copy-paste</p><h4 id="晦涩性"><a href="#晦涩性" class="headerlink" title="晦涩性"></a>晦涩性</h4><p>晦涩性是指模块难以理解。</p><p>怎么能尽量避免产生以上问题呢？那就需要借鉴敏捷设计。</p><h3 id="敏捷设计原则之SOLID"><a href="#敏捷设计原则之SOLID" class="headerlink" title="敏捷设计原则之SOLID"></a>敏捷设计原则之SOLID</h3><p>大家都听说过敏捷开发宣言， 其中最后一条是”随时应对变化<strong>重于</strong>遵循计划”。要达这目的并且避免写出有臭味的代码，就需要引入敏捷设计，就是要让自己的代码够“敏捷”。我认为只有代码具有敏捷设计思想，敏捷开发宣言所倡导的才能够顺利实现。打个比喻，中国古代打战有许多排兵布阵的阵法，想想看如果使用的是一个玄妙无比的阵法，比如八卦阵，但是执行阵法的士兵大部分都是老弱残兵以及老幼妇孺，恐怕连阵势都摆不出来就战败了吧。我们这里说的敏捷设计原则就像士兵一样，是基石。</p><p>那到底什么是敏捷设计呢？敏捷设计是一个过程，不是一个事件。它是一个持续的应用原则、模式以及实践来改进软件的<strong>结构</strong>和<strong>可读性</strong>的过程。它致力于保持系统在任何事件都尽可能的<strong>简单干净</strong>以及富有表达力。</p><p>接下来，我们学习敏捷设计原则，但请记住，敏捷开发人员不会把这些原则应用到一个庞大的预先设计中。相反，这些原则被应用在一次次的迭代中，力图使代码以及代码所表达的设计保持干净。</p><h4 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则(SRP)"></a>单一职责原则(SRP)</h4><blockquote><p>一个类应该只有一个发生变化的原因</p></blockquote><p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。</p><p>考虑下图的设计：<br><img src="http://ot51d7lis.bkt.clouddn.com/Rectangle%201.png" alt=""></p><p>这个设计违反了SRP，显然Rectangle有两个职责。导致的问题：</p><ul><li>打包到GUI程序中的时候，需要将计算机几何应用库与图形绘制应用库一起打包</li><li>如果依赖的任何一个库发生了改变，则需要重新对程序打包。如果忘记做，而仅仅只是更新其中一个库的话，将会导致不可预料的错误。</li></ul><p>改进：<br><img src="http://ot51d7lis.bkt.clouddn.com/Rectangle_good%20%281%29.png" alt=""></p><h4 id="开放关闭原则-OCP"><a href="#开放关闭原则-OCP" class="headerlink" title="开放关闭原则(OCP)"></a>开放关闭原则(OCP)</h4><blockquote><p>一个类对修改关闭，对扩展开放。具体来说就是，一个类在不修改它本身的代码的前提下允许扩展它的行为(如果不修改做不到到话，尽量把修改做到最小化)</p></blockquote><p>OCP 听起来并不复杂，但是却不是那么容易实践的。因为通常情况下，为一个功能而设计可以对未来需求开放的类并不简单。这里重要的点是<strong>未来需求</strong>。当我们并不知道未来软件的需求的时候，我们将怎样设计类，模块，功能等来迎合需求呢？这就是OCP不容易实践的原因，通常需要彻底的思考设计。</p><p>我们该如何去解决这个问题呢？当设计类结构的时候，需要用心确类的扩展简单。设计阶段，将所有类的用例记下来，并对所有用例给出合适的接口。抽象类是一种能够确保类能够被扩展的手段，但是要小心不要违反<strong>SRP</strong>，当想让一个类做更多事情的时候就很容易发生。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>该例子是一个计算个人所得税的例子。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Individual</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> salary : <span class="type">Double</span>;</span><br><span class="line">    <span class="keyword">let</span> age : <span class="type">NSInteger</span>;</span><br><span class="line">    <span class="keyword">let</span> name : <span class="type">String</span>;</span><br><span class="line">    <span class="keyword">let</span> countryCode : <span class="type">String</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(salary : <span class="type">Double</span>,</span><br><span class="line">         age : <span class="type">NSInteger</span>,</span><br><span class="line">         name : <span class="type">String</span>,</span><br><span class="line">         countryCode : <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.countryCode = countryCode;</span><br><span class="line">        <span class="keyword">self</span>.salary = salary;</span><br><span class="line">        <span class="keyword">self</span>.age = age;</span><br><span class="line">        <span class="keyword">self</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxCalculator</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="number">_</span> individual : Individual)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tax : <span class="type">Double</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Just use flat calculation algorithm for simplicity as </span></span><br><span class="line">        <span class="comment">//here we just use it to demostrate OCP.</span></span><br><span class="line">        <span class="keyword">switch</span> individual.countryCode &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"cn"</span>:</span><br><span class="line">            tax = individual.salary * <span class="number">0.18</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"us"</span>:</span><br><span class="line">            tax = individual.salary * <span class="number">0.20</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"jp"</span>:</span><br><span class="line">            tax = individual.salary * <span class="number">0.50</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            tax = <span class="number">0.1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="现有设计的缺点"><a href="#现有设计的缺点" class="headerlink" title="现有设计的缺点"></a>现有设计的缺点</h5><p>现有设计的缺点很明显，如果我们想要增加一个新的国家的个税计算，则一定需要更改现有的TaxCalculator的代码。显然，当前设计不对扩展开放。</p><h5 id="一个更好的符合OCP的设计"><a href="#一个更好的符合OCP的设计" class="headerlink" title="一个更好的符合OCP的设计"></a>一个更好的符合OCP的设计</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CalculateTax</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="number">_</span> individual : Individual)</span></span> -&gt; <span class="type">Double</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaTaxCalculator</span>: <span class="title">NSObject</span>, <span class="title">CalculateTax</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="number">_</span> individual: Individual)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> individual.salary * <span class="number">0.18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USATaxCalculator</span>: <span class="title">NSObject</span>, <span class="title">CalculateTax</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="number">_</span> individual: Individual)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> individual.salary * <span class="number">0.20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JapanTaxCalculator</span>: <span class="title">NSObject</span>, <span class="title">CalculateTax</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="number">_</span> individual: Individual)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> individual.salary * <span class="number">0.50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxCalculator</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(taxHandler : CalculateTax, individual : Individual)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taxHandler.calculate(individual);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，如果增加一个国家的税收计算，只需要添加一个相应国家的税收计算类<strong>XXTaxCalculator</strong>即可，并不需要更改任何已有代码。如果项目按照以下划分程序依赖库的结构，则只需要重新编译具体实现了各个国家税收的库就行了。</p><p><img src="http://ot51d7lis.bkt.clouddn.com/Better%20OCP%20design.png" alt=""></p><h4 id="Liskov替换原则-LSP"><a href="#Liskov替换原则-LSP" class="headerlink" title="Liskov替换原则(LSP)"></a>Liskov替换原则(LSP)</h4><blockquote><p>Liskov 替换原则说的是如果D是B的派生类，则任何B的应用都必须能够被D的实例替换而不会影响到程序运行的逻辑或者功能。换句话说，就是派生类必须能够完全替换基类。</p></blockquote><p>我们先看一个大概只要你学Liskov原则都会看到的一个违反Liskov原则的例子。</p><h5 id="违反Liskov替换原则的例子"><a href="#违反Liskov替换原则的例子" class="headerlink" title="违反Liskov替换原则的例子"></a>违反Liskov替换原则的例子</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> width : <span class="type">Double</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> height : <span class="type">Double</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(width : <span class="type">Double</span>, height : <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.width = width;</span><br><span class="line">        <span class="keyword">self</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">area</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> _width : <span class="type">Double</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> _height : <span class="type">Double</span> = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">public</span> <span class="keyword">var</span> width: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>(newWidth) &#123;</span><br><span class="line">            _width = newWidth;</span><br><span class="line">            _height = newWidth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">public</span> <span class="keyword">var</span> height: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _height;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> (newHeight) &#123;</span><br><span class="line">            _width = newHeight;</span><br><span class="line">            _height = newHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRectangle</span><span class="params">(width : Double, height : Double)</span></span> -&gt; <span class="type">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Square</span>(width: width, height: height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Someday we use createRectangle method somewhere in our application.</span></span><br><span class="line"><span class="keyword">var</span> rect:<span class="type">Rectangle</span> = createRectangle(width : <span class="number">3</span>, height : <span class="number">3</span>);</span><br><span class="line">rect.area();<span class="comment">//result is 9 as expected</span></span><br><span class="line"></span><br><span class="line">rect.height = <span class="number">10</span>;</span><br><span class="line">rect.width = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">rect.area();<span class="comment">//opps!result is 25 not 50!</span></span><br></pre></td></tr></table></figure><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>这个原则是对OCP的一个扩展，他告诉我们从基类派生出新的派生类的时候，我们必须保证不要破坏原有的行为。</p><h4 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则(ISP)"></a>接口隔离原则(ISP)</h4><blockquote><p>接口隔离原则讲的是接口实现者不能被强迫实现或者依赖一些不会用到的方法</p></blockquote><p>举个例子，当我们将一个模块从应用程序中抽象出多个子模块的时候需要小心注意了。假设这个模块是基于类实现的，那我们能够从类抽象出接口（注：这些接口都会在现有系统被逐一实现）。但当我们把模块加入到一个与原系统相比仅含有某些接口的实现，有可能会发生这种结果：为了保证模块能够正常运行，不得不在新系统中被迫实现所有的接口并且有相当一部分接口不会被用到，这部分不会被用到的接口通常为空实现或者返回虚假值，就为了实现接口而实现。通常发生这种情况的接口叫做胖接口或者被污染的接口。</p><h5 id="一个违反了ISP的实际例子"><a href="#一个违反了ISP的实际例子" class="headerlink" title="一个违反了ISP的实际例子"></a>一个违反了ISP的实际例子</h5><p>在早期的ASP.NET 2.0版本中，如果网站想实现自己的membership provider，则需要将需要或者不需要的所有接口都实现一遍。如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomMembershipProvider</span> : <span class="title">MembershipProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> ApplicationName</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">ChangePassword</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">string</span> oldPassword, <span class="keyword">string</span> newPassword</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">ChangePasswordQuestionAndAnswer</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">string</span> password, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">string</span> newPasswordQuestion, <span class="keyword">string</span> newPasswordAnswer</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MembershipUser <span class="title">CreateUser</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">string</span> password, <span class="keyword">string</span> email, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">string</span> passwordQuestion, <span class="keyword">string</span> passwordAnswer, <span class="keyword">bool</span> isApproved, <span class="keyword">object</span> providerUserKey, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">out</span> MembershipCreateStatus status</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">DeleteUser</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">bool</span> deleteAllRelatedData</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> EnablePasswordReset</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> EnablePasswordRetrieval</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MembershipUserCollection <span class="title">FindUsersByEmail</span>(<span class="params"><span class="keyword">string</span> emailToMatch, <span class="keyword">int</span> pageIndex, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalRecords</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MembershipUserCollection <span class="title">FindUsersByName</span>(<span class="params"><span class="keyword">string</span> usernameToMatch, <span class="keyword">int</span> pageIndex, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalRecords</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MembershipUserCollection <span class="title">GetAllUsers</span>(<span class="params"><span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalRecords</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">GetNumberOfUsersOnline</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetPassword</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">string</span> answer</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MembershipUser <span class="title">GetUser</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">bool</span> userIsOnline</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MembershipUser <span class="title">GetUser</span>(<span class="params"><span class="keyword">object</span> providerUserKey, <span class="keyword">bool</span> userIsOnline</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetUserNameByEmail</span>(<span class="params"><span class="keyword">string</span> email</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> MaxInvalidPasswordAttempts</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> MinRequiredNonAlphanumericCharacters</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> MinRequiredPasswordLength</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> PasswordAttemptWindow</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> MembershipPasswordFormat PasswordFormat</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> PasswordStrengthRegularExpression</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> RequiresQuestionAndAnswer</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> RequiresUniqueEmail</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ResetPassword</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">string</span> answer</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">UnlockUser</span>(<span class="params"><span class="keyword">string</span> userName</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UpdateUser</span>(<span class="params">MembershipUser user</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">ValidateUser</span>(<span class="params"><span class="keyword">string</span> username, <span class="keyword">string</span> password</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The method or operation is not implemented."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Holy crap! 这是一大堆东西！可能有的时候，你仅仅是想将现有的membership provider的一部分改变成自己的而已，但是你要面对的是全部实现，这就麻烦了。如果你不懂ASP.NET没关系，这里这个例子只是想展示一种违反了ISP后的结果。</p><h5 id="一个更简单通俗的例子来说明ISP"><a href="#一个更简单通俗的例子来说明ISP" class="headerlink" title="一个更简单通俗的例子来说明ISP"></a>一个更简单通俗的例子来说明ISP</h5><p>首先看代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"feed with bone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> : <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"feed with mice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，你注意到有些动物是宠物，有宠物的一些特性或者与人互动的方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//梳理毛发</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">groom</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"feed with bone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">groom</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"grooming and dog feel comfortable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> : <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"feed with mice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">groom</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//ignore this method as I am not going to groom a feaking snake.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写到这里，你就发现问题了。Animal接口被污染了。在Snake类上它要求我们实现一个并不需要的方法。好的做法是把宠物相关的方法抽象出来。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//梳理毛发</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">groom</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span>, <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"feed with bone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">groom</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"grooming and dog feel comfortable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> : <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"feed with mice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="依赖反转-DIP"><a href="#依赖反转-DIP" class="headerlink" title="依赖反转(DIP)"></a>依赖反转(DIP)</h4><blockquote><p>A. High-level 模块不应该依赖 low-level 模块。两者都应该依赖于抽象<br>B. 抽象不能依赖于具体实现。具体实现应该依赖于抽象</p></blockquote><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><p>一个简单的例子，我们经常使用DAO(Database access object)来封装数据库操作的逻辑。下面这个例子，将数据库具体的类OracleConnection直接在DAO类里面了。那如果我们想把数据库换成Mysql，怎么办呢？（想想一下，有很多DAO类，里面的逻辑都很复杂很多）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//open database connection logic</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> databaseConnection : <span class="type">OracleConnection</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        databaseConnection = <span class="type">OracleConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">commitChanges</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        databaseConnection.<span class="keyword">open</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//deal with data base changes</span></span><br><span class="line">        </span><br><span class="line">        databaseConnection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符合DIP的写法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DatabaseConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleConnection</span> : <span class="title">DatabaseConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//open database connection logic</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlConnection</span> : <span class="title">DatabaseConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//open database connection logic</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> databaseConnection : <span class="type">DatabaseConnection</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(databaseConnection : <span class="type">DatabaseConnection</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.databaseConnection = databaseConnection;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">commitChanges</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        databaseConnection.<span class="keyword">open</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//deal with data base changes</span></span><br><span class="line">        </span><br><span class="line">        databaseConnection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咋一看，细节上可能跟Liskov要求的很像，但是请注意，DIP主要强调的是模块之间的依赖。下面用一个例子来感受一下</p><p><img src="http://ot51d7lis.bkt.clouddn.com/DIP%20%281%29.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;敏捷设计之SOLID原则&quot;&gt;&lt;a href=&quot;#敏捷设计之SOLID原则&quot; class=&quot;headerlink&quot; title=&quot;敏捷设计之SOLID原则&quot;&gt;&lt;/a&gt;敏捷设计之SOLID原则&lt;/h2&gt;&lt;h3 id=&quot;把握所学东西的本质&quot;&gt;&lt;a href=&quot;#把握所学
      
    
    </summary>
    
      <category term="设计模式" scheme="http://gobodigo.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="OOD" scheme="http://gobodigo.com/tags/OOD/"/>
    
      <category term="设计模式" scheme="http://gobodigo.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="敏捷开发" scheme="http://gobodigo.com/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>最短路径之迪杰斯特拉算法</title>
    <link href="http://gobodigo.com/2017/07/28/algorithm-dijstra/"/>
    <id>http://gobodigo.com/2017/07/28/algorithm-dijstra/</id>
    <published>2017-07-28T15:36:29.000Z</published>
    <updated>2018-06-23T14:22:10.517Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//maximum number of nodes</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxnum = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//maxWeight represents infinite large</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxWeight = <span class="number">99999</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///Calculate the shortest path based on dijstra algorithm.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///@param v source node index</span></span><br><span class="line"><span class="comment">///@param n number of nodes</span></span><br><span class="line"><span class="comment">///@param dist to save the distance between the ith node and the source node </span></span><br><span class="line"><span class="comment">///@param record the ith node's previous node.</span></span><br><span class="line"><span class="comment">///@param arcs line matrix</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijstra</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> n, <span class="keyword">int</span> *dist, <span class="keyword">int</span> *prev, <span class="keyword">int</span> arcs[maxnum][maxnum])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bool array marks which node has been put to S.</span></span><br><span class="line">    <span class="comment">//S is an array that contains nodes which makes up of the shortest path.</span></span><br><span class="line">    <span class="keyword">bool</span> included[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        included[i] = <span class="literal">false</span>;</span><br><span class="line">        dist[i] = arcs[v][i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if the distance is not maxWeight, then it means there </span></span><br><span class="line">        <span class="comment">//is a line between the v and the ith node. so set the ith</span></span><br><span class="line">        <span class="comment">//node's previous to v.</span></span><br><span class="line">        <span class="keyword">if</span>(dist[i] &lt; maxWeight) &#123;</span><br><span class="line">            prev[i] = v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//start from the source node v, so put it to S by default.</span></span><br><span class="line">    included[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//self to self is 0.</span></span><br><span class="line">    dist[v] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = maxWeight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> w;</span><br><span class="line">        <span class="comment">//find min distance between the source node and the ith</span></span><br><span class="line">        <span class="comment">//node. the ith node must not be in S.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!included[j] &amp;&amp; dist[j] &lt; min) &#123;</span><br><span class="line">                min = dist[j];</span><br><span class="line">                w = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put the w node into the S.</span></span><br><span class="line">        included[w] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!included[j] &amp;&amp; min + arcs[w][j] &lt; dist[j]) &#123;</span><br><span class="line">                dist[j] = min + arcs[w][j];</span><br><span class="line">                prev[j] = w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ifstream ifin;</span><br><span class="line">    <span class="comment">//number of nodes</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="comment">//number of lines</span></span><br><span class="line">    <span class="keyword">int</span> lines;</span><br><span class="line">    <span class="keyword">int</span> arcs[maxnum][maxnum];</span><br><span class="line"></span><br><span class="line">    ifin.open(<span class="string">"sample.txt"</span>);</span><br><span class="line">    <span class="keyword">if</span>(ifin.is_open()) &#123;</span><br><span class="line">        ifin &gt;&gt; n;</span><br><span class="line">        ifin &gt;&gt; lines;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> row, column, weight;</span><br><span class="line">            ifin &gt;&gt; row &gt;&gt; column &gt;&gt; weight;</span><br><span class="line"></span><br><span class="line">            arcs[row][column] = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"could not open sample.txt "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ifin.close();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" nodes "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; lines &lt;&lt; <span class="string">" lines "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//to save the distance between the ith node and the source node </span></span><br><span class="line">    <span class="keyword">int</span> dist[n];</span><br><span class="line">    <span class="comment">//to record the ith node's previous node.</span></span><br><span class="line">    <span class="keyword">int</span> prev[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//init arcs</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arcs[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                arcs[i][j] = maxWeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arcs[i][j] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    dijstra(v, n, dist, prev, arcs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"distance between "</span>&lt;&lt; v &lt;&lt;<span class="string">" and last point is :"</span> &lt;&lt; dist[n<span class="number">-1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"shortest path is ["</span>;</span><br><span class="line">    <span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path(<span class="number">1</span>,k);</span><br><span class="line">    <span class="keyword">while</span>(prev[k] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        k = prev[k];</span><br><span class="line">        path.push_back(k);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator iter = path.rbegin(); iter != path.rend(); ++iter) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://gobodigo.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://gobodigo.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>找出不包含某个字符串的正则表达式</title>
    <link href="http://gobodigo.com/2017/07/23/find-non-include-regex/"/>
    <id>http://gobodigo.com/2017/07/23/find-non-include-regex/</id>
    <published>2017-07-23T14:42:43.000Z</published>
    <updated>2018-06-23T14:22:10.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="找出不包含某个字符串的正则表达式"><a href="#找出不包含某个字符串的正则表达式" class="headerlink" title="找出不包含某个字符串的正则表达式"></a>找出不包含某个字符串的正则表达式</h2><p>经常我们会遇到想找出不包含某个字符串，例如”hello”的文本，最容易想到的是在正则表达式里使用[^hello]，但这样的正则表达式完全是另外一个意思，它的意思是字符串里不能包含’h’，’e’，’l’, ‘o’四个单字符。那什么样的正则表达式能过滤出不包含完整“hello”字串的信息呢？事实上，说正则表达式里不支持逆向匹配并不是百分之百的正确。</p><p>我们就可以使用<strong>否定式查找</strong>来模拟出逆向匹配，从而解决我们的问题, 表达式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((?!hello).)*$</span><br></pre></td></tr></table></figure><p>上面这个表达式就能过滤出不包含<strong>‘hello’</strong>字串的信息。</p><p>先解释一下<strong>?!</strong>的用法：</p><blockquote><p>零宽负向先行断言(?!exp)，只会匹配后缀exp不存在的位置。例如，\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字</p></blockquote><p>现在解释表达式<strong>((?!hello).)*</strong>：</p><p>表达式<strong>(?!hello)</strong>.会往前查找，看看前面是不是没有“hello”字串，如果没有(是其它字符)，那么.(点号)就会匹配这些其它字符。<strong>这种正则表达式的“查找”也叫做“zero-width-assertions”(零宽度断言)</strong>，因为它不会捕获任何的字符，只是判断。</p><p>我们来看一下<strong>“Nonnullhelloworld”</strong>这个字符串。</p><blockquote><p><strong>(?!hello)</strong>会检查每个字符串后面跟的是不是<strong>‘hello’</strong>，如果不是，.就匹配这个字符。表达式<strong>(?!hello)</strong>只执行一次，所以将这个表达式用括弧包裹组成组，然后用星号*修饰来匹配零次或多次。</p></blockquote><p>匹配<strong>Nonnullhelloworld</strong>返回false, 说明该字符串含有<strong>‘hello’</strong>子串。<br>匹配<strong>Nonnullworld</strong>返回true<br>匹配<strong>Nonnullworldhello</strong>返回false<br>匹配<strong>hello</strong>返回false</p><p>所以，你可以认为当表达式返回false的时候，说明该字符串包含指定子串。</p><p>最后推荐一个好的，快速的测试正则表达式的在线网站，我用起来很不错(居然还有正则表达式的解释，真是有点强大哈，还不快自己尝试一下)：<br><a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;找出不包含某个字符串的正则表达式&quot;&gt;&lt;a href=&quot;#找出不包含某个字符串的正则表达式&quot; class=&quot;headerlink&quot; title=&quot;找出不包含某个字符串的正则表达式&quot;&gt;&lt;/a&gt;找出不包含某个字符串的正则表达式&lt;/h2&gt;&lt;p&gt;经常我们会遇到想找出不包含某
      
    
    </summary>
    
      <category term="正则表达式" scheme="http://gobodigo.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://gobodigo.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>React Component lifecycle</title>
    <link href="http://gobodigo.com/2017/07/18/react-life-cycle/"/>
    <id>http://gobodigo.com/2017/07/18/react-life-cycle/</id>
    <published>2017-07-18T04:17:55.000Z</published>
    <updated>2018-06-23T14:22:10.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Component-lifecycle"><a href="#React-Component-lifecycle" class="headerlink" title="React Component lifecycle"></a>React Component lifecycle</h2><p>最近刚开始使用react-native做项目，有一些心得，所以在这里发表一下。对没有接触过的技术和开发环境，了解核心component的生命周期是非常重要的。能够保证在写代码的过程中不容易犯错。</p><h3 id="什么是component？"><a href="#什么是component？" class="headerlink" title="什么是component？"></a>什么是component？</h3><p>根据React官方文档，<strong>React.component</strong>是一个抽象基类。能够让使用者将UI拆成各个独立地，可重用的component。常见的使用场景是继承它并提供一个<strong>render()</strong>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-lifecycle-methods"><a href="#React-lifecycle-methods" class="headerlink" title="React lifecycle methods"></a>React lifecycle methods</h2><p><img src="http://ot51d7lis.bkt.clouddn.com/React%20component%20life%20cycle2.png" alt=""></p><p>上面这张图展示了一个React component的声明周期，从创建到销毁。接下来将逐步介绍以上各个方法并阐述什么时候使用使用它们。</p><blockquote><p>Mount单词，字典上的意思是：”to get up on something above the level of the ground; especially:to seat oneself (as on a horse) for riding” 后面这段意思很形象，骑上马，可以跑了 :[</p></blockquote><h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount()</span><br></pre></td></tr></table></figure><p>当这个方法被调用的时候，说明你的component将要出现在屏幕上。渲染方法<strong>render</strong>将要被调用。在这个方法内你能干什么呢？</p><p>答案是，你可能不能干太多的事情。因为当<strong>componentWillMount</strong>被调用的时候，还没有任何component能够使用，所以你也无法对DOM做任何事情。</p><p>另外，大部分初始化已经被component的<strong>constructor</strong>完成了(构造函数是你初始化默认值的最佳地方)</p><p>说到这里，你可能觉得这个方法真没用。但是，这里有一个例外场景，就是当你要在<strong>运行时</strong>为整个app<strong>初始化全局配置</strong>的时候, 并且要保证第一时间初始化方法被调用，这个方法是有特别有用的。这就意味着你的component中几乎99%以上都不会用到这个方法。</p><p>你可能会看到有人在这个方法里面启动AJAX calls或者执行一个Promise函数。不要这样做，下面会详细讲述原因。</p><blockquote><p><em>常用场景</em>：需要在运行时确定的App相关的配置<br><em>是否能够使用setState</em>: 否</p></blockquote><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()</span><br></pre></td></tr></table></figure><p>这个方法运行时，你的component已经加载上并已可使用。在这个方法里面你可以做很多事情，例如：</p><ul><li>在一个已经渲染好的画板上绘制新的元素</li><li>添加event listeners</li><li>加载数据。为什么这个方法里面适合加载数据呢？因为你无法保证一个异步的请求在component加载完成之前完成，它是不确定的。在某些情况下，还可能会在component unmount之后请求的response才返回回来，而这个时候如果根据response来设置state的话就会产生异常。使用componentDidMount至少可以保证在结果返回之前是有component可以使用的（但是，如果response返回时不进行处理的话，也有可能会发生错误。本文提供一种ES6 promise的解决方案，请看<a href="#cancelablePromise">make cancelable promise</a>）</li></ul><p>基本上，你可以做任何事情</p><blockquote><p><em>常用场景</em>：发起Ajax请求来加载数据<br><em>是否能够使用setState</em>: 是</p></blockquote><h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps)</span><br></pre></td></tr></table></figure><p>这个方法被用来接收新的props。也许一些数据在parent component中加载并被传到当前compoent中。</p><p>当component能够对新的props做出任何动作之前，componentWillReceiveProps会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line"><span class="keyword">if</span>(nextProps.text !=== <span class="keyword">this</span>.props.text) &#123;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">text</span>: nextProps.text&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码可以看到，在该方法中，我们可以同时访问当前props和nextProps。所以我们要做的就是：</p><ul><li>检查props是否有变化</li><li>如果有变化，就做出相应的变化</li></ul><p><strong>注意</strong></p><ul><li>React也许会在props没有变化的时候调用该方法。所以总是判断props是否变化是有必要的。这种情况可能发生在parent component引起当前组件re-render。</li><li>React不会在component初始化，设置初始props的调用该方法</li><li>调用<strong>this.setState</strong>通常不会触发该方法</li></ul><blockquote><p><em>常用场景</em>：针对props的变化做出相应的状态改变<br><em>是否能够使用setState</em>: 是</p></blockquote><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState)</span><br></pre></td></tr></table></figure><p>使用这个方法告诉React当前state或者props的变化是否会引起re-render。默认情况下，这个方法总是返回true，即需要re-render。如果你想要避免一些无意义或者纯属浪费的re-render，这个方法是你最好的选择。</p><p>P.S 根据react最新官方文档，目前，如果<strong>shouldComponentUpdate</strong>方法返回false,则componentWillUpdate(), render() 和 componentDidUpdate()方法都不会被调用。但是，在未来的react版本中，<strong> shouldComponentUpdate</strong>的返回值只具有参考价值而不是强制性的，所以方法返回false后component也有可能会re-render。</p><blockquote><p><em>常用场景</em>：控制component是否需要re-render<br><em>是否能够使用setState</em>: NO</p></blockquote><h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillUpdate(nextProps, nextState)</span><br></pre></td></tr></table></figure><p>这个方法在re-render之前会被调用。这个方法跟<strong> componentWillReceiveProps</strong>类似，只是你不能在该方法里调用this.setState。</p><p>如果你的component使用了<strong>shouldComponentUpdate</strong>并且当props变化的时候需要做一些事情，那么<strong>componentWillUpdate</strong>是一个不错的选择。</p><blockquote><p><em>常用场景</em>：在有shouldComponentUpdate方法的component中配合着用<br><em>是否能够使用setState</em>: NO</p></blockquote><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState)</span><br></pre></td></tr></table></figure><p>在component 更新之后，使用这个方法来操作DOM。这个方法也是一个发送网络请求的好的选择之一，前提是需要判断当前props和prevProps相比是否产生了变化（如果props没有变化，则不需要发送网络请求）</p><blockquote><p><em>常用场景</em>：根据props或者state的变化，对DOM进行相应的变化<br><em>是否能够使用setState</em>: YES</p></blockquote><h3 id="componentDidUpdate-1"><a href="#componentDidUpdate-1" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillUnmount()</span><br></pre></td></tr></table></figure><p>这个方法会在component从屏幕上移除和销毁之前调用。在这个方法中，你需要进行任何必要的清理工作，比如取消network request，invalidate timers，remove event listeners或者清除任何在<strong>componentDidMount()</strong>中创建的DOM元素。</p><blockquote><p><em>常用场景</em>：清理一切需要必须清理的资源，事务或者事件<br><em>是否能够使用setState</em>: NO</p></blockquote><h2 id="make-cancelable-promise"><a href="#make-cancelable-promise" class="headerlink" title="make cancelable promise"></a><a id="cancelablePromise">make cancelable promise</a></h2><p>使用Promise发起异步请求，等到异步请求返回的时候，component有可能已经unmounted了。这个时候在response的callback尝试setState会引发异常。怎么避免这种情况呢？</p><p>感谢@istarkov提供了一种可取消的Promise的方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeCancelable = <span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> hasCanceled_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> wrappedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promise.then(</span><br><span class="line">      val =&gt; hasCanceled_ ? reject(&#123;<span class="attr">isCanceled</span>: <span class="literal">true</span>&#125;) : resolve(val),</span><br><span class="line">      error =&gt; hasCanceled_ ? reject(&#123;<span class="attr">isCanceled</span>: <span class="literal">true</span>&#125;) : reject(error)</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    promise: wrappedPromise,</span><br><span class="line">    cancel() &#123;</span><br><span class="line">      hasCanceled_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cancelablePromise = makeCancelable(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> component.setState(&#123;...&#125;&#125;))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">cancelablePromise</span><br><span class="line">  .promise</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'resolved'</span>))</span><br><span class="line">  .catch(<span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'isCanceled'</span>, reason.isCanceled));</span><br><span class="line"></span><br><span class="line">cancelablePromise.cancel(); <span class="comment">// Cancel the promise</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Component-lifecycle&quot;&gt;&lt;a href=&quot;#React-Component-lifecycle&quot; class=&quot;headerlink&quot; title=&quot;React Component lifecycle&quot;&gt;&lt;/a&gt;React Compo
      
    
    </summary>
    
      <category term="javascript" scheme="http://gobodigo.com/categories/javascript/"/>
    
      <category term="react" scheme="http://gobodigo.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://gobodigo.com/tags/javascript/"/>
    
      <category term="react" scheme="http://gobodigo.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>iOS 内购商品类型</title>
    <link href="http://gobodigo.com/2017/07/16/ios-iap-product-types/"/>
    <id>http://gobodigo.com/2017/07/16/ios-iap-product-types/</id>
    <published>2017-07-16T14:49:27.000Z</published>
    <updated>2018-06-23T14:22:10.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS-内购商品类型"><a href="#iOS-内购商品类型" class="headerlink" title="iOS 内购商品类型"></a>iOS 内购商品类型</h2><p>由于最近的项目有IAP，所以又重温了一遍iOS IAP的知识。在开发的过程中，发现网络上的各种文档都有，当然最详细的还是苹果官方IAP文档，但是苹果对每种类型介绍太官方(官话)，让刚开始看的人不太容易弄懂每种商品的区别。另外，深刻理解每种商品对后面的开发非常有帮助。所以，我觉得有必要说一下。</p><p>IAP的类型一共4种，接下来，我将对每一种进行通俗易懂的解释。</p><h3 id="Consumable-products-消费类型内购"><a href="#Consumable-products-消费类型内购" class="headerlink" title="Consumable products (消费类型内购)"></a>Consumable products (消费类型内购)</h3><p>苹果官方解释</p><blockquote><p>Items that get used up over the course of running your app. Examples include minutes for a Voice over IP app and one-time services such as voice transcription.</p></blockquote><p>这种产品类型应该大家都知道，很好懂。但是如果仅根据苹果的两个例子，这两个例子都是跟语音通话相关，一个没使用过任何内购的人还真不好理解。通俗来讲，就好比你去菜市场里边，你花X元买了Y个苹果，然后这个交易就完成了。</p><p>该类型的内购的例子很多，比如你玩游戏的时候，花了X元买了N个钻石；花X元兑换了N个虚拟币用于购买app中的某些虚拟服务等。</p><p>顾名思义，这种类型的商品的特点就是商品可消耗，可重复购买。每次购买的值一般都会叠加。如果买了后，用户不消耗，则一直存在用户相关的账号中。</p><h3 id="Non-consumable-products-非消费类型内购"><a href="#Non-consumable-products-非消费类型内购" class="headerlink" title="Non-consumable products (非消费类型内购)"></a>Non-consumable products (非消费类型内购)</h3><p>该种类型的商品主要用于解锁app上的一些功能，或者游戏的某个关卡，又或者是获得某项主题之类的。总之就是当用户购买后，这个商品就一直生效，不需要重复购买。</p><h3 id="Auto-renewable-subscriptions-自动续费类型的内购"><a href="#Auto-renewable-subscriptions-自动续费类型的内购" class="headerlink" title="Auto-renewable subscriptions (自动续费类型的内购)"></a>Auto-renewable subscriptions (自动续费类型的内购)</h3><p>这种类型的商品有点跟Non-consumable商品类似，目的都是用户付钱后提供app中特定的某些功能。最大的不同是，该类商品有是有期限的。比如，某些app的VIP系统，这种系统一般按月计算，需要用户按照价格每月扣费。只有用户续费后，VIP才生效并且VIP相关的特权才能够生效。过期不续费，则VIP失效。</p><p>该类商品与Non-consumable products的区别是</p><ul><li>有过期时间</li><li>可重复购买(系统自动续订)</li><li>该类商品的内容一般都会不断的更新</li></ul><p>与Consumable products的区别是</p><ul><li>这种商品买了就等于开始消耗，不用用户主动进行后续操作</li><li>有过期时间</li><li>苹果系统自动帮用户续费购买</li></ul><h3 id="Non-renewable-subscriptions"><a href="#Non-renewable-subscriptions" class="headerlink" title="Non-renewable subscriptions"></a>Non-renewable subscriptions</h3><p>这种类型的商品跟Auto-renewable subscriptions的商品非常像，目的也是为了给用户提供持续服务的类型。最大的区别是，与该商品相关的续订的信息都由你的服务器保存和处理。简而言之，就是如果你选了Auto-renewable subscriptions，则苹果帮你搞定一切，包括用户的自动续订。但如果你选了Non-renewable subscriptions做为你提供的商品的类型，则你需要负责续订以及过期时间的管理，以及让用户购买的商品在用户所有的设备上可用（只要用户正确登录你的服务器）。哦，对了，还有恢复购买也需要你负责。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iOS-内购商品类型&quot;&gt;&lt;a href=&quot;#iOS-内购商品类型&quot; class=&quot;headerlink&quot; title=&quot;iOS 内购商品类型&quot;&gt;&lt;/a&gt;iOS 内购商品类型&lt;/h2&gt;&lt;p&gt;由于最近的项目有IAP，所以又重温了一遍iOS IAP的知识。在开发的过程中
      
    
    </summary>
    
      <category term="iOS" scheme="http://gobodigo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://gobodigo.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>什么是Javascript Hoisting？</title>
    <link href="http://gobodigo.com/2017/07/08/javascript-Hoisting/"/>
    <id>http://gobodigo.com/2017/07/08/javascript-Hoisting/</id>
    <published>2017-07-07T16:06:58.000Z</published>
    <updated>2018-07-16T05:09:16.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Javascript-hoisting"><a href="#什么是Javascript-hoisting" class="headerlink" title="什么是Javascript hoisting?"></a>什么是Javascript hoisting?</h2><p>Javascript hoisting 国内一般翻译为<strong>变量提升</strong>。</p><p>Hoisting这个词是用来描述Javascript在执行上下文，尤其是创建和执行变量时时如何工作的。但是，hoisting使得Javascript的执行容易被误解。例如，hoisting通常被认为是把变量或者方法在运行时环境被物理地移动到代码的顶部，但是实际上却不是这样。实际上发生的是，变量或者方法的声明在编译时就被提前放入内存，而代码仍然放到原来的位置上。</p><p>接下来，通过几个例子来帮助理解</p><h2 id="方法提升例子"><a href="#方法提升例子" class="headerlink" title="方法提升例子"></a>方法提升例子</h2><p>将方法的声明在任何代码执行之前放入内存的好处是能够在方法声明之前就能够使用它，因为它已经被提前放入内存里了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"My cat's name is "</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catName(<span class="string">"Tigger"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是: "My cat's name is Tigger"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码是一个非常正常的代码。接下来，我们看一下如果把调用放到申明之前会发生什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">catName(<span class="string">"Chloe"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My cat's name is "</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果是: "My cat's name is Chloe"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>结果是，跟我们之前写的代码运行的结果一模一样。这是因为Javascript就是这么运行的。</p><h2 id="变量提升例子"><a href="#变量提升例子" class="headerlink" title="变量提升例子"></a>变量提升例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">6</span>;</span><br><span class="line">num + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> num; </span><br><span class="line"><span class="comment">/* 只要num声明过，无论它在什么位置上，这个代码都运行正常*/</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: Javascript 只提升变量的声明，而不提升变量的定义。如果你在声明和定义之前试图获得变量的值，你会得到undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="comment">// 初始化 x</span></span><br><span class="line"><span class="built_in">console</span>.log(x + <span class="string">" "</span> + y); <span class="comment">// '1 undefined'，因为定义不会被提升</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这段代码的结果也是一样的</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="comment">// Initialize x</span></span><br><span class="line"><span class="keyword">var</span> y; <span class="comment">// Declare y</span></span><br><span class="line"><span class="built_in">console</span>.log(x + <span class="string">" "</span> + y); <span class="comment">// '1 undefined'</span></span><br><span class="line">y = <span class="number">2</span>; <span class="comment">// Initialize y</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Javascript-hoisting&quot;&gt;&lt;a href=&quot;#什么是Javascript-hoisting&quot; class=&quot;headerlink&quot; title=&quot;什么是Javascript hoisting?&quot;&gt;&lt;/a&gt;什么是Javascript hoist
      
    
    </summary>
    
      <category term="javascript" scheme="http://gobodigo.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://gobodigo.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>iOS memory types</title>
    <link href="http://gobodigo.com/2017/07/07/ios-memory-types/"/>
    <id>http://gobodigo.com/2017/07/07/ios-memory-types/</id>
    <published>2017-07-07T05:12:52.000Z</published>
    <updated>2018-06-23T14:22:10.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS-memory"><a href="#iOS-memory" class="headerlink" title="iOS memory"></a>iOS memory</h2><h3 id="Clean-memory"><a href="#Clean-memory" class="headerlink" title="Clean memory"></a>Clean memory</h3><p>clean memory are memories that can be recreated, on iOS it is memory of:</p><ul><li>system framework</li><li>binary executable of your app</li><li>memory mapped files   </li></ul><p>Also notice this situation: when your app link to a framework, the clean memory will increase by the size of the framework binary. But most of time, only part of binary is really loaded in physical memory.</p><h3 id="Dirty-memory"><a href="#Dirty-memory" class="headerlink" title="Dirty memory"></a>Dirty memory</h3><p>All memory that is not clean memory is dirty memory, dirty memory can’t be recreated by system.</p><p>When there is a memory pressure, system will unload some clean memory, when the memory is needed again, system will recreate them.</p><p>But for dirty memory, system can’t unload them, and iOS has no swap mechanism, so dirty memory will always be kept in physical memory, till it reach a certain limit, then your App will be terminated and all memory for it is recycled by system.</p><h3 id="Virtual-memory"><a href="#Virtual-memory" class="headerlink" title="Virtual memory"></a>Virtual memory</h3><p><code>virtual memory = clean memory + dirty memory.</code><br>That means virtual memory is all the memory your App want.</p><h3 id="Resident-memory"><a href="#Resident-memory" class="headerlink" title="Resident memory"></a>Resident memory</h3><p><code>resident memory = dirty memory + clean memory that loaded in physical memory</code><br>resident memory is the memory really loaded in your physical memory, it mean all the dirty memory and parts of your clean memory.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>At any time, this is always true:<br><code>virtual memory == (clean memory + dirty memory) &gt; resident memory &gt; dirty memory</code><br>If you are worrying about the physical memory your App is taking(which is the key reason your App is terminated due to low memory), you should mainly focus on resident memory.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iOS-memory&quot;&gt;&lt;a href=&quot;#iOS-memory&quot; class=&quot;headerlink&quot; title=&quot;iOS memory&quot;&gt;&lt;/a&gt;iOS memory&lt;/h2&gt;&lt;h3 id=&quot;Clean-memory&quot;&gt;&lt;a href=&quot;#Clean-mem
      
    
    </summary>
    
      <category term="iOS" scheme="http://gobodigo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://gobodigo.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>查找素数</title>
    <link href="http://gobodigo.com/2017/07/07/find-primes/"/>
    <id>http://gobodigo.com/2017/07/07/find-primes/</id>
    <published>2017-07-07T04:13:17.000Z</published>
    <updated>2018-06-23T14:22:10.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个Eratosthenes-算法的实现"><a href="#一个Eratosthenes-算法的实现" class="headerlink" title="一个Eratosthenes 算法的实现"></a>一个Eratosthenes 算法的实现</h2><p><strong>质数的定义</strong></p><blockquote><p>质数（prime number）又称素数，有无限个。质数定义为在大于1的自然数中，除了1和它本身以外不再有其他因数，这样的数称为质数。</p></blockquote><p><strong>算法核心思想</strong>：<br>这个算法的目的主要是找给定自然数N，找到N以内的所有质数。下面这个算法的实现的思想是：计算出质数P，然后将自然数N内所有能够整除P的数都剔除掉，之后计算出下一个质数，重复以上过程直到所有数都遍历过一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrimes</span><span class="params">(<span class="keyword">bool</span> *isPrimeFlags, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    isPrimeFlags[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        isPrimeFlags[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化，设置第一个素数为2</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> p = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置j为p的平方的原因是</span></span><br><span class="line">    <span class="comment">//1. 例如素数7，能够整除它的数为14,21,28,35,42,49,56,63,etc. 以此类推，设能够整除</span></span><br><span class="line">    <span class="comment">//它的数为K, 则K = x * 7, 这里x &lt; 7时，比如2，在算法循环初始的时候，已经被设置为false了，则没必要再</span></span><br><span class="line">    <span class="comment">//在素数为7的时候再比较一次了。</span></span><br><span class="line">    <span class="comment">//2. p * p 如果大于n，则能够提前退出而不用遍历所有从2到N的素数。例如找100内的所有素数的时候，找到11的时候，</span></span><br><span class="line">    <span class="comment">//11 * 11 &gt; 100 就能够提前退出了。 </span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j = p * p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将所有能够整除p的数都设置为false</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt; n) &#123;</span><br><span class="line">            isPrimeFlags[j] = <span class="literal">false</span>;</span><br><span class="line">            j += p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//找到下一个素数</span></span><br><span class="line">        <span class="keyword">while</span>(!isPrimeFlags[++p] &amp;&amp; p &lt; n) &#123;&#125;</span><br><span class="line">        j = p * p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference:<br><a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一个Eratosthenes-算法的实现&quot;&gt;&lt;a href=&quot;#一个Eratosthenes-算法的实现&quot; class=&quot;headerlink&quot; title=&quot;一个Eratosthenes 算法的实现&quot;&gt;&lt;/a&gt;一个Eratosthenes 算法的实现&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://gobodigo.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://gobodigo.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>URL&amp;URL encoding</title>
    <link href="http://gobodigo.com/2015/10/15/URL-URL-encoding/"/>
    <id>http://gobodigo.com/2015/10/15/URL-URL-encoding/</id>
    <published>2015-10-15T15:42:00.000Z</published>
    <updated>2018-06-23T14:22:10.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>当我们浏览网页的时候，其中涉及到不少技术。其中，有一项最基本的机制使得我们可以顺利的在浩瀚的互联网海洋中快速的定位到我们想要的资源并接收数据。这项技术是网页的根本，是形成互联网的基石。它就是URL。</p><p>URL 英文全名 Uniform resource locator，翻译过来就是统一资源标识符。例如，<a href="http://www.baidu.com" target="_blank" rel="noopener">”http://www.baidu.com”</a> 是一个URL。关于URL怎么定义，该遵守什么规则，是有着一套世界公认的规则的，<a href="http://tools.ietf.org/html/rfc1738" target="_blank" rel="noopener">第一版规则是在1994年诞生的</a>。</p><h2 id="一般URL语法"><a href="#一般URL语法" class="headerlink" title="一般URL语法"></a>一般URL语法</h2><p>我们先来看一个例子：<br><code>https://jay:123456@www.example.com:8080/file;p=1?q=2#section2</code></p><p>分解该URL，我们能够获得以下信息：</p><table><thead><tr><th style="text-align:left">组件名</th><th style="text-align:right">数据</th></tr></thead><tbody><tr><td style="text-align:left">scheme</td><td style="text-align:right">https</td></tr><tr><td style="text-align:left">user</td><td style="text-align:right">jay</td></tr><tr><td style="text-align:left">password</td><td style="text-align:right">123456</td></tr><tr><td style="text-align:left">host address</td><td style="text-align:right">www.example.com</td></tr><tr><td style="text-align:left">port</td><td style="text-align:right">8080</td></tr><tr><td style="text-align:left">path</td><td style="text-align:right">file</td></tr><tr><td style="text-align:left">path parameter</td><td style="text-align:right">p=1</td></tr><tr><td style="text-align:left">query parameter</td><td style="text-align:right">q=2</td></tr><tr><td style="text-align:left">fragment</td><td style="text-align:right">section2</td></tr></tbody></table><h2 id="HTTP-URL-语法"><a href="#HTTP-URL-语法" class="headerlink" title="HTTP URL 语法"></a>HTTP URL 语法</h2><p>HTTP URL的scheme通常组成为</p><ol><li>Scheme: http或者https</li><li>Path: 指定获取数据的路径</li><li>Query参数（可选）</li><li>fragment参数（可选）</li></ol><h2 id="Path-与-Path-parameters"><a href="#Path-与-Path-parameters" class="headerlink" title="Path 与 Path parameters"></a>Path 与 Path parameters</h2><p>其中，Path跟我们熟知的文件路径非常类似。Path通常是以一个“/”开头，每一个文件夹又都被一个”/”互相分隔，例如”/Study/URLSyntax/starter/first.docx”分为四个部分：”study”，”URLSyntax”，”starter”，”first.docx”。</p><p>每一个Path部分后都能够跟一个可选的参数(path parameters)部分，判断的根据是以”;”字符开始。参数可以有多个，并以”;”分隔。每个参数都有值，以”=”分隔，例如”/file;a=1”，定义了”file”这个path的参数为”a”，值为”1”。这些参数是很少用到的，但是他们是确实存在的。</p><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>在Path后面以”?”开始的部分就是Query了，Query包含一组以”&amp;”分隔的参数与数值对。参数及其数值以”=”分隔。例如，”?url=<a href="http://domain.tld/&amp;title=The" target="_blank" rel="noopener">http://domain.tld/&amp;title=The</a> title of a post”，定义了两个参数”url”和”title”，他们的值分别为”<a href="http://domain.tld“和”The" target="_blank" rel="noopener">http://domain.tld“和”The</a> title of a post”。Query 用的最多的情况是提交一个form的时候或者是搜索的时候。</p><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>Fragment是用来定位到当前页面某一个具体位置的url部分。在url部分以”#”开始的部分为fragment。</p><h2 id="URL-encoding"><a href="#URL-encoding" class="headerlink" title="URL encoding"></a>URL encoding</h2><p>好了，聊完URL基本组成部分，接下来就要介绍URL encoding了。经常上网的同学一定对下面这种URL不陌生吧？<br><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=baiduhome_pg&amp;wd=%E7%BA%A2%E7%B1%B3note2&amp;rsv_spt=1&amp;oq=green&amp;rsv_pq=947783b70000" target="_blank" rel="noopener">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=baiduhome_pg&amp;wd=%E7%BA%A2%E7%B1%B3note2&amp;rsv_spt=1&amp;oq=green&amp;rsv_pq=947783b70000</a></p><p>可以看到，该URL包括了一些神秘的字符，例如”wd=%E7%BA%A2%E7%B1%B3note2”，一般的人是无法读的。这就是被编码后的样子了。</p><p>为什么给URL 编码呢？原因很简单，因为如果允许任意字符的话，解析URL的任务将会非常艰巨而且效率低下，比如URL允许中文或者阿拉伯文。所以W3C组织就规定了一套协议，现在最新的应该是<a href="https://tools.ietf.org/html/rfc3986" target="_blank" rel="noopener">RFC 3986</a>，有兴趣深入研究的同学推荐阅读。编码就是对URL每个部分，不允许出现的字符进行编码。那么允许的字符有哪些呢？如下所示：<br><img src="http://img.blog.csdn.net/20151016130703641" alt=""><br>摘取自:<a href="https://en.wikipedia.org/wiki/Percent-encoding#Types_of_URI_characters." target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Percent-encoding#Types_of_URI_characters.</a></p><p>URL encoding介绍的差不多了，现在来讲讲URL encoding需要注意的问题。</p><h2 id="URL-encoding-陷阱"><a href="#URL-encoding-陷阱" class="headerlink" title="URL encoding 陷阱"></a>URL encoding 陷阱</h2><p>RFC标准中没有指明使用哪种特定的编码格式来对url 进行编码。一般来说ASCII字符都是可以被使用的，但是对于保留字符(reserved characters)和非ASCII字符，我们必须考虑需要使用哪种编码方式来进行编码。最新的RFC标准是使用UTF-8来进行编码。但是，开发者也许也会遇到不是用UTF-8编码的时候。。。</p><p>对于HTTP URTs来说，空格符号在Path部分会被编码为”%20”，而”+”是不用被编码的。<br>对于Query部分来说，空格符号会被编码为”+”或者”%20”，而”+”会被编码为”%2B”。</p><p>这样就意味着一个字符串在不同的部分就会被编码为不同的形式。例如”blue+light blue”字符串。我们来看一个具体的例子：<a href="http://example.com/blue+light%20blue?blue%2Blight+blue“。从这个例子可以看出如果对URL语法不熟悉的话，是无法对一个URL进行编码的。要对URL进行编码，就需要知道每一部分对应的保留字符是哪些而不是简单的对URL进行遍历并编码。" target="_blank" rel="noopener">http://example.com/blue+light%20blue?blue%2Blight+blue“。从这个例子可以看出如果对URL语法不熟悉的话，是无法对一个URL进行编码的。要对URL进行编码，就需要知道每一部分对应的保留字符是哪些而不是简单的对URL进行遍历并编码。</a></p><p>每个部分的保留字符</p><ul><li>“?”在Query部分是不用被编码的</li><li>“/”在Query部分也是不用被编码的</li><li>“:@-._~!$&amp;’()*+,;=”在Path部分是不用被编码的</li><li>“/?:@-._~!$&amp;’()*+,;=”在fragment部分是不用被编码的</li></ul><h2 id="解码后的URL无法被正确分析"><a href="#解码后的URL无法被正确分析" class="headerlink" title="解码后的URL无法被正确分析"></a>解码后的URL无法被正确分析</h2><p>通过一个例子来分析更清楚：<br><code>”http://example.com/blue%2Fred%3Fand+green”</code></p><p>该URL有如下几个部分：</p><table><thead><tr><th style="text-align:left">部分</th><th style="text-align:right">值</th></tr></thead><tbody><tr><td style="text-align:left">scheme</td><td style="text-align:right">http</td></tr><tr><td style="text-align:left">host</td><td style="text-align:right">example.com</td></tr><tr><td style="text-align:left">path</td><td style="text-align:right">blue%2Fred%3Fand+green</td></tr><tr><td style="text-align:left">解码后的path</td><td style="text-align:right">blue/red?and+green</td></tr></tbody></table><p>分析后，很明显，我们是在找一个”blue/red?and+green”的资源，而不是找一个在blue文件夹下的”red?and+green”的资源。</p><p>如果我们首先对URL解码，然后再分析呢？解码后的URL:<br><code>”http://example.com/blue/red?and+green”</code></p><table><thead><tr><th style="text-align:left">部分</th><th style="text-align:right">值</th></tr></thead><tbody><tr><td style="text-align:left">scheme</td><td style="text-align:right">http</td></tr><tr><td style="text-align:left">host</td><td style="text-align:right">example.com</td></tr><tr><td style="text-align:left">path</td><td style="text-align:right">blue/red</td></tr><tr><td style="text-align:left">query parameter name</td><td style="text-align:right">and+green</td></tr></tbody></table><p>很明显，这个是错误的。这个例子告诉我们，分析并拆解一个URL必须要在解码之前进行。</p><h2 id="解码后的URL有可能无法被编码回原来的格式"><a href="#解码后的URL有可能无法被编码回原来的格式" class="headerlink" title="解码后的URL有可能无法被编码回原来的格式"></a>解码后的URL有可能无法被编码回原来的格式</h2><p>如果对”<a href="http://example.com/blue%2Fred%3Fand+green“解码，你将得到”http://example.com/blue/red?and+green“，然后又进行编码，你将得到”http://example.com/blue/red?and+green“，因为这个是合法的URL不需要进行character" target="_blank" rel="noopener">http://example.com/blue%2Fred%3Fand+green“解码，你将得到”http://example.com/blue/red?and+green“，然后又进行编码，你将得到”http://example.com/blue/red?and+green“，因为这个是合法的URL不需要进行character</a> escape。</p><p>参考原文：<br><a href="http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding" target="_blank" rel="noopener">http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;当我们浏览网页的时候，其中涉及到不少技术。其中，有一项最基本的机制使得我们可以顺利的在浩瀚的互联网海洋中快速的定位到我们想要的资源并接收数据
      
    
    </summary>
    
      <category term="http" scheme="http://gobodigo.com/categories/http/"/>
    
    
      <category term="http" scheme="http://gobodigo.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Dynamic binding 研究</title>
    <link href="http://gobodigo.com/2015/09/22/objc-dynamic-binding/"/>
    <id>http://gobodigo.com/2015/09/22/objc-dynamic-binding/</id>
    <published>2015-09-22T15:30:00.000Z</published>
    <updated>2018-06-23T14:22:10.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Objective-C-Dynamic-binding-研究"><a href="#Objective-C-Dynamic-binding-研究" class="headerlink" title="Objective-C Dynamic binding 研究"></a>Objective-C Dynamic binding 研究</h2><p>对于习惯编写静态编程语言(C#/java/C++)的同学，初识Objective-C，可能会跟我有一样的迷惑。什么迷惑呀？请看下面这段oc的代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyObject</span> : <span class="title">NSObject</span></span></span><br><span class="line">+ (<span class="keyword">id</span>)factoryMethod;</span><br><span class="line">-(<span class="built_in">NSString</span>*)tell;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyObject</span></span></span><br><span class="line">+ (<span class="keyword">id</span>)factoryMethodB &#123; <span class="keyword">return</span> [[[<span class="keyword">self</span> <span class="keyword">class</span>] alloc] init]; &#125;</span><br><span class="line">- (<span class="built_in">NSString</span>*)tell</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">@"I'm MyObject"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyOtherObject</span> : <span class="title">NSObject</span></span></span><br><span class="line">-(<span class="keyword">void</span>)say;</span><br><span class="line">-(<span class="built_in">NSString</span>*)tell;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyOtherObject</span></span></span><br><span class="line">-(<span class="keyword">void</span>)say</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"Hello world"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span>*)tell</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">@"I'm MyOtherObject"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DoSometing()</span><br><span class="line">&#123;</span><br><span class="line">MyOtherObject *obj = [MyObject factoryMethod]; (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[obj tell]);                       (<span class="number">2</span>)</span><br><span class="line">[obj say];                                     (<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码顺利通过编译。调用DoSomething，运行到第(3)行时出错。先来看第（1）行，我打赌这行已经让只熟悉静态语言的程序员们不明白了，因为照理来说，MyObject的factoryMethod返回的是自己的实例，要是用别的语言编写，编译器第(1)行就报错了，因为类型不匹配呀。为什么OC的编译器不报错呢？不急，我们先来看看这个返回值<strong>id</strong>的定义：</p><blockquote><p>Objective-C provides a special type that can hold a pointer to any<br>object you can construct with Objective-C—regardless of class. This<br>type is called id, and can be used to make your Objective-C<br>programming generic. （大致意思就是id是一个与类型无关的指向任意对象的东东。能够让你OC编程泛型化。）</p></blockquote><p>几个意思呢？其实id就是一个指针，但是它又不同于c/c++里面的void<em>。void</em>是指向内存中任意块的未知对象或者未知内容的。id很明确，它就是用来指向OC对象的。（关于void*是否能转换为OC对象这里暂时不讨论）。好了，这就解释了第(1)行的可行性。</p><p>运行到第二行的时候，NSLog输出:</p><blockquote><p>I’m MyObject</p></blockquote><p>它居然正确的调用了MyObject的tell方法！这就要Dynamic binding（动态绑定）知识来解释了：</p><blockquote><p>Dynamic binding means that when we call a certain object’s method, and there are several implementations of that method, the right one is figured out at runtime. In Objective-C, this idea is used, but is also extended - you are permitted to send any message to any object. At first glance this may sound rather dangerous, but in fact this allows you a lot of flexibility. （大意是：OC的动态绑定的意思是OC扩展了Dynamic binding，使编程人员能够被允许发送任何消息给任何对象。咋一听这种扩展非常危险，但是实际上它带来了很大的灵活性！）</p></blockquote><p>由于MyOtherObject*仅仅是声明一个指针，被赋予id。所以第(2)行怎么执行是在运行时决定的，所以[obj tell]也就顺理成章能够毫无错误的运行了。</p><p>第(3)行运行的时候，报错:</p><blockquote><p>unrecognized selector sent to instance 0x100400100</p></blockquote><p>结合上面的知识，很容易判断，因为MyOtherObject有say方法，所以编译器通过。但是运行时，其实指针的内容是MyObject，MyObject并没有声明say方法，所以就报错了。</p><p>关于Dynamic binding还有个更有趣的例子，请看：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LinkedListNode</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> <span class="keyword">id</span> data;</span><br><span class="line"><span class="keyword">@property</span> LinkedListNode * child;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LinkedListNode</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DoSometing2()</span><br><span class="line">&#123;</span><br><span class="line">    LinkedListNode *p = [[LinkedListNode alloc] init];</span><br><span class="line">    p.data = [MyOtherObject new];</span><br><span class="line">    </span><br><span class="line">    LinkedListNode *child = [LinkedListNode new];</span><br><span class="line">    child.data = [MyObject new];</span><br><span class="line">    p.child = child;</span><br><span class="line">    </span><br><span class="line">    LinkedListNode *node;</span><br><span class="line">    <span class="keyword">for</span> (node = p; node != <span class="literal">nil</span>; node = node.child) &#123;</span><br><span class="line">    [[node data] say];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译，没任何错误。运行，报的是跟上面(3)一样的错误。同样的原因，怎么办呢？你可能会想，太灵活了，太容易出错了。幸好，有解决的办法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LinkedListNode *p = [LinkedListNode new];</span><br><span class="line">p.data = [MyOtherObject new];</span><br><span class="line"> </span><br><span class="line"> LinkedListNode *child = [LinkedListNode new];</span><br><span class="line"> child.data = [MyObject new];</span><br><span class="line"> p.child = child;</span><br><span class="line"> </span><br><span class="line"> LinkedListNode *node;</span><br><span class="line"> <span class="keyword">for</span> (node = p; node != <span class="literal">nil</span>; node = node.child) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([[node data] respondsToSelector:<span class="keyword">@selector</span>(say)]) &#123;</span><br><span class="line">            [[node data] say];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>另外，还可以判断是否是某一特定类：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([node isKindOfClass:[MyOtherObject <span class="keyword">class</span>]]) &#123;</span><br><span class="line">[[node data] say];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上述例子的factoryMethod的返回值id，苹果已经不推荐这么用了。苹果推荐返回instancetype。它跟id用法一样，但是主要是用在alloc, init或者类的工厂方法上的。<br>它的好处是 编译器能够检测被调用的对象上是否能够反应传入的消息，如果不能，则发出警告。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Objective-C-Dynamic-binding-研究&quot;&gt;&lt;a href=&quot;#Objective-C-Dynamic-binding-研究&quot; class=&quot;headerlink&quot; title=&quot;Objective-C Dynamic binding 研究&quot;&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://gobodigo.com/categories/iOS/"/>
    
    
      <category term="objective-c" scheme="http://gobodigo.com/tags/objective-c/"/>
    
  </entry>
  
</feed>
